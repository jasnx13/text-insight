<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text Insight AI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 32px;
            height: 32px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        /* Custom scrollbar for better aesthetics */
        textarea::-webkit-scrollbar {
            width: 8px;
        }
        textarea::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        textarea::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 10px;
        }
        textarea::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <div class="container mx-auto p-4 md:p-8 max-w-6xl">
        <header class="text-center mb-8">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-900">Text Insight AI</h1>
            <p class="text-md text-gray-600 mt-2">Analyze, understand, and refine your writing with the power of AI.</p>
        </header>

        <main class="space-y-8">
            <!-- Top Section: Input and Analysis -->
            <div class="bg-white p-6 rounded-2xl shadow-lg">
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <!-- Left Column: Input -->
                    <div class="flex flex-col">
                        <h2 class="text-2xl font-semibold mb-4 text-gray-800">Your Text</h2>
                        <textarea id="inputText" class="w-full flex-grow p-4 border border-gray-300 rounded-lg resize-y focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200" placeholder="Enter or paste your text here..."></textarea>
                        <button id="analyzeBtn" class="mt-4 w-full bg-blue-600 text-white font-semibold py-3 px-4 rounded-lg hover:bg-blue-700 transition duration-300 shadow-md flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" /></svg>
                            Analyze Text
                        </button>
                    </div>
                    <!-- Right Column: Analysis -->
                    <div>
                        <h2 class="text-2xl font-semibold mb-4 text-gray-800">Analysis</h2>
                         <!-- Loader for analysis -->
                        <div id="analysisLoader" class="hidden flex justify-center items-center py-4">
                            <div class="loader"></div>
                        </div>
                        <!-- Analysis Results -->
                        <div id="analysisResults" class="space-y-4">
                            <!-- Placeholder content -->
                            <div id="effectiveness-container" class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                                <h3 class="font-semibold text-lg text-gray-800">Effectiveness Score</h3>
                                <div class="w-full bg-gray-200 rounded-full h-4 mt-2">
                                    <div id="effectiveness-bar" class="bg-gray-400 h-4 rounded-full transition-all duration-500" style="width: 0%"></div>
                                </div>
                                <p id="effectiveness-reason" class="text-gray-600 text-sm mt-1">Analysis will appear here.</p>
                            </div>
                            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                                <h3 class="font-semibold text-lg text-gray-800">Formality</h3>
                                <p id="formality-result" class="text-gray-600">Waiting for text...</p>
                            </div>
                            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                                <h3 class="font-semibold text-lg text-gray-800">Emotion</h3>
                                <p id="emotion-result" class="text-gray-600">Waiting for text...</p>
                            </div>
                            <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                                <h3 class="font-semibold text-lg text-gray-800">Readability</h3>
                                <p id="readability-result" class="text-gray-600">Waiting for text...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Bottom Section: Paraphrasing -->
            <div class="bg-white p-6 rounded-2xl shadow-lg flex flex-col">
                <h2 class="text-2xl font-semibold mb-4 text-gray-800">Paraphrasing Tool</h2>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                    <div>
                        <label for="purpose" class="block text-sm font-medium text-gray-700">Purpose</label>
                        <select id="purpose" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                            <option>AI Humanizing</option>
                            <option selected>Improve Grammar & Fluency</option>
                            <option>Shorten</option>
                            <option>Expand</option>
                        </select>
                    </div>
                    <div>
                        <label for="tone" class="block text-sm font-medium text-gray-700">Tone</label>
                        <select id="tone" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                            <option>Same as original</option>
                            <option>More Professional</option>
                            <option>More Casual</option>
                            <option>More Confident</option>
                            <option>Simpler</option>
                            <option>More Persuasive</option>
                        </select>
                    </div>
                    <div>
                        <label for="difference" class="block text-sm font-medium text-gray-700">Difference</label>
                        <select id="difference" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md">
                            <option>Minor Changes</option>
                            <option selected>Balanced</option>
                            <option>Major Overhaul</option>
                        </select>
                    </div>
                </div>

                <button id="paraphraseBtn" class="w-full bg-indigo-600 text-white font-semibold py-3 px-4 rounded-lg hover:bg-indigo-700 transition duration-300 shadow-md flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" /><path fill-rule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clip-rule="evenodd" /></svg>
                    Paraphrase Text
                </button>
                
                <div class="mt-6 flex-grow flex flex-col">
                    <div id="paraphraseLoader" class="hidden flex justify-center items-center py-4">
                        <div class="loader"></div>
                    </div>
                    <textarea id="outputText" readonly class="w-full h-48 flex-grow p-4 bg-gray-50 border border-gray-200 rounded-lg resize-y" placeholder="Paraphrased text will appear here..."></textarea>
                    <button id="copyBtn" class="mt-2 bg-gray-200 text-gray-700 font-semibold py-2 px-4 rounded-lg hover:bg-gray-300 transition duration-300 flex items-center justify-center disabled:opacity-50 disabled:cursor-not-allowed" disabled>
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" /><path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z" /></svg>
                        Copy Text
                    </button>
                </div>
            </div>
        </main>
        
        <!-- Error Modal -->
        <div id="errorModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3 text-center">
                    <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
                        <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path></svg>
                    </div>
                    <h3 class="text-lg leading-6 font-medium text-gray-900 mt-2">An Error Occurred</h3>
                    <div class="mt-2 px-7 py-3">
                        <p id="errorMessage" class="text-sm text-gray-500">Could not connect to the AI service. Please try again later.</p>
                    </div>
                    <div class="items-center px-4 py-3">
                        <button id="closeModalBtn" class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-full shadow-sm hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300">
                            Close
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const inputText = document.getElementById('inputText');
        const analyzeBtn = document.getElementById('analyzeBtn');
        const analysisLoader = document.getElementById('analysisLoader');
        const analysisResultsEl = document.getElementById('analysisResults');

        const effectivenessBar = document.getElementById('effectiveness-bar');
        const effectivenessReason = document.getElementById('effectiveness-reason');
        const formalityResult = document.getElementById('formality-result');
        const emotionResult = document.getElementById('emotion-result');
        const readabilityResult = document.getElementById('readability-result');

        const paraphraseBtn = document.getElementById('paraphraseBtn');
        const outputText = document.getElementById('outputText');
        const paraphraseLoader = document.getElementById('paraphraseLoader');
        const copyBtn = document.getElementById('copyBtn');

        const errorModal = document.getElementById('errorModal');
        const errorMessage = document.getElementById('errorMessage');
        const closeModalBtn = document.getElementById('closeModalBtn');
        
        const apiKey = ""; // API key will be provided by the execution environment.

        const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

        /**
         * Generic function to call the Gemini API with exponential backoff.
         * @param {object} payload - The payload to send to the API.
         * @param {number} maxRetries - Maximum number of retries.
         * @returns {Promise<object>} - The JSON response from the API.
         */
        async function callGeminiApi(payload, maxRetries = 3) {
            let attempt = 0;
            while (attempt < maxRetries) {
                try {
                    const response = await fetch(API_URL, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorData.error?.message || 'Unknown error'}`);
                    }
                    
                    const result = await response.json();
                    if (!result.candidates || !result.candidates[0].content.parts[0].text) {
                       throw new Error("Invalid response structure from API.");
                    }

                    return result;

                } catch (error) {
                    attempt++;
                    console.error(`Attempt ${attempt} failed:`, error);
                    if (attempt >= maxRetries) {
                        showErrorModal(error.message);
                        throw error;
                    }
                    const delay = Math.pow(2, attempt) * 1000; // Exponential backoff: 2s, 4s, 8s...
                    await new Promise(resolve => setTimeout(resolve, delay));
                }
            }
        }
        
        /**
         * Resets the analysis UI to its initial placeholder state.
         */
        function resetAnalysisUI() {
            effectivenessBar.style.width = '0%';
            effectivenessBar.className = 'h-4 rounded-full transition-all duration-500 bg-gray-400';
            effectivenessReason.textContent = 'Analysis will appear here.';
            formalityResult.innerHTML = 'Waiting for text...';
            emotionResult.innerHTML = 'Waiting for text...';
            readabilityResult.innerHTML = 'Waiting for text...';
        }

        /**
         * Handles the text analysis functionality.
         */
        async function analyzeText() {
            const text = inputText.value.trim();
            if (!text) {
                showErrorModal("Please enter some text to analyze.");
                return;
            }

            analysisLoader.classList.remove('hidden');
            analysisResultsEl.classList.add('hidden');
            analyzeBtn.disabled = true;
            analyzeBtn.classList.add('opacity-50', 'cursor-not-allowed');
            resetAnalysisUI();

            const systemPrompt = "You are a helpful text analysis expert. Analyze the user's text and provide insights on formality, primary emotion, readability, and an overall effectiveness score. Respond ONLY with a valid JSON object matching the provided schema, with no additional text or formatting.";

            const userPrompt = `Please analyze the following text:\n\n---\n\n${text}`;
            
            const payload = {
                contents: [{ parts: [{ text: userPrompt }] }],
                systemInstruction: {
                    parts: [{ text: systemPrompt }]
                },
                generationConfig: {
                    responseMimeType: "application/json",
                    responseSchema: {
                        type: "OBJECT",
                        properties: {
                            effectiveness: {
                                type: "OBJECT",
                                properties: {
                                    score: { type: "INTEGER", description: "An overall effectiveness score from 0 to 100, considering clarity, impact, and goal achievement." },
                                    reason: { type: "STRING", description: "A brief summary of why this score was given." }
                                }
                            },
                            formality: {
                                type: "OBJECT",
                                properties: {
                                    level: { type: "STRING", description: "The formality level (e.g., Formal, Neutral, Informal)." },
                                    reason: { type: "STRING", description: "A brief reason for the formality assessment." }
                                }
                            },
                            emotion: {
                                type: "OBJECT",
                                properties: {
                                    primary: { type: "STRING", description: "The primary emotion detected (e.g., Joy, Sadness, Anger, Neutral)." },
                                    reason: { type: "STRING", description: "A brief explanation for the emotion detected." }
                                }
                            },
                            readability: {
                                type: "OBJECT",
                                properties: {
                                    level: { type: "STRING", description: "An estimated readability level (e.g., '8th-grade reading level')." },
                                    reason: { type: "STRING", description: "A brief justification for the readability score." }
                                }
                            }
                        }
                    }
                }
            };
            
            try {
                const result = await callGeminiApi(payload);
                const analysisData = JSON.parse(result.candidates[0].content.parts[0].text);
                displayAnalysis(analysisData);
            } catch (error) {
                console.error('Analysis failed:', error);
                 resetAnalysisUI(); // Reset on failure
            } finally {
                analysisLoader.classList.add('hidden');
                analysisResultsEl.classList.remove('hidden');
                analyzeBtn.disabled = false;
                analyzeBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            }
        }

        /**
         * Displays the analysis results in the UI.
         * @param {object} data - The parsed analysis data.
         */
        function displayAnalysis(data) {
            const { effectiveness, formality, emotion, readability } = data;
            
            // Update effectiveness bar
            const score = effectiveness.score || 0;
            effectivenessBar.style.width = `${score}%`;
            let barColorClass = 'bg-red-500';
            if (score > 75) {
                barColorClass = 'bg-green-500';
            } else if (score > 40) {
                barColorClass = 'bg-yellow-500';
            }
            effectivenessBar.className = `h-4 rounded-full transition-all duration-500 ${barColorClass}`;
            effectivenessReason.textContent = effectiveness.reason;

            // Update other fields
            formalityResult.innerHTML = `<span class="font-medium text-blue-600">${formality.level}</span>: ${formality.reason}`;
            emotionResult.innerHTML = `<span class="font-medium text-green-600">${emotion.primary}</span>: ${emotion.reason}`;
            readabilityResult.innerHTML = `<span class="font-medium text-purple-600">${readability.level}</span>: ${readability.reason}`;
        }

        /**
         * Handles the text paraphrasing functionality.
         */
        async function paraphraseText() {
            const text = inputText.value.trim();
            if (!text) {
                showErrorModal("Please enter some text to paraphrase.");
                return;
            }

            paraphraseLoader.classList.remove('hidden');
            outputText.value = '';
            paraphraseBtn.disabled = true;
            copyBtn.disabled = true;
            paraphraseBtn.classList.add('opacity-50', 'cursor-not-allowed');
            copyBtn.classList.add('disabled:opacity-50', 'disabled:cursor-not-allowed');


            const tone = document.getElementById('tone').value;
            const difference = document.getElementById('difference').value;
            const purpose = document.getElementById('purpose').value;

            let toneInstruction = `The desired tone is '${tone}'.`;
            if (tone === 'Same as original') {
                toneInstruction = 'Match the tone of the original text.';
            }
            
            const prompt = `Paraphrase the following text. The goal is to make it '${purpose}'. ${toneInstruction} The level of change from the original should be '${difference}'. Respond only with the paraphrased text.

Original Text:
---
${text}
---
Paraphrased Text:`;

            const payload = {
                contents: [{ parts: [{ text: prompt }] }],
                generationConfig: {
                    temperature: 0.7,
                    maxOutputTokens: 1024,
                }
            };
            
            try {
                const result = await callGeminiApi(payload);
                const paraphrasedText = result.candidates[0].content.parts[0].text;
                outputText.value = paraphrasedText.trim();
                copyBtn.disabled = false;
                copyBtn.classList.remove('disabled:opacity-50', 'disabled:cursor-not-allowed');

            } catch (error) {
                console.error('Paraphrasing failed:', error);
            } finally {
                paraphraseLoader.classList.add('hidden');
                paraphraseBtn.disabled = false;
                paraphraseBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            }
        }
        
        /**
         * Copies text from the output textarea to the clipboard.
         */
        function copyOutputText() {
            const tempTextArea = document.createElement('textarea');
            tempTextArea.value = outputText.value;
            document.body.appendChild(tempTextArea);
            tempTextArea.select();
            try {
                document.execCommand('copy');
                copyBtn.textContent = 'Copied!';
                setTimeout(() => {
                    copyBtn.innerHTML = `
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor"><path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" /><path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z" /></svg>
                    Copy Text`;
                }, 2000);
            } catch (err) {
                console.error('Failed to copy text: ', err);
                showErrorModal("Failed to copy text to clipboard.");
            }
            document.body.removeChild(tempTextArea);
        }

        /**
         * Shows the error modal with a specific message.
         * @param {string} msg - The error message to display.
         */
        function showErrorModal(msg) {
            errorMessage.textContent = msg;
            errorModal.classList.remove('hidden');
        }

        // Event Listeners
        analyzeBtn.addEventListener('click', analyzeText);
        paraphraseBtn.addEventListener('click', paraphraseText);
        copyBtn.addEventListener('click', copyOutputText);
        closeModalBtn.addEventListener('click', () => errorModal.classList.add('hidden'));
        window.addEventListener('click', (event) => {
            if (event.target == errorModal) {
                errorModal.classList.add('hidden');
            }
        });

    </script>

</body>
</html>
